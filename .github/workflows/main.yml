name: Main

on:
  push:
    branches:
      - main

permissions:
  actions: read
  checks: write
  contents: write
  deployments: write
  issues: write
  discussions: read
  packages: write
  pages: write
  pull-requests: read
  repository-projects: read
  security-events: read
  statuses: read

jobs:
  main:

    runs-on: ubuntu-latest

    environment: Testing

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      id: test
      run: dotnet test --no-build --verbosity normal
      env:
        JWT__SECRET: ${{ secrets.JWT__SECRET }}
        JWT__ISSUER: ${{ secrets.JWT__ISSUER }}
        JWT__AUDIENCE: ${{ secrets.JWT__AUDIENCE
        ConnectionStrings__DefaultConnection: ${{ secrets.CONNECTIONSTRINGS__DEFAULTCONNECTION }}
    
    - name: Setup git
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"    

    - name: Install Versionize
      run: dotnet tool install --global Versionize

    - name: Versioning
      id: versionize
      run: versionize --aggregate-pre-releases --skip-dirty
      continue-on-error: true

    - name: No release required
      if: steps.versionize.outcome != 'success'
      run: echo "Skipping Release. No release required."
        
    - name: Push changes to GitHub
      if: steps.versionize.outcome == 'success'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        tags: true
        force: true

    - name: "Create release"
      if: steps.versionize.outcome == 'success'
      uses: "actions/github-script@v5"
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |
          try {
            const tags_url = context.payload.repository.tags_url + "?per_page=1"
            const result = await github.request(tags_url)
            const current_tag = result.data[0].name
            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: current_tag,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: current_tag,
            });
          } catch (error) {
            core.setFailed(error.message);
          }
